plugins {
    id 'groovy'
}

group = 'se.alipsa'
version = '1.0.0-SNAPSHOT'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    if (version.contains('SNAPSHOT')) {
        // Slows down the build (a lot), use only if local SNAPSHOTS are needed
        mavenLocal()
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}


dependencies {
    org.gradle.internal.os.OperatingSystem os = org.gradle.internal.os.OperatingSystem.current()

    // check https://repo1.maven.org/maven2/org/openjfx/javafx/20/javafx-20.pom for the platform property
    def qualifier = 'unknown'
    if (os.isLinux()) {
        qualifier='linux'
    } else if (os.isWindows()) {
        qualifier = 'win'
    } else if (os.isMacOsX()) {
        qualifier = 'mac-aarch64'
    }
    def javaFxVersion = '20'
    def groovyVersion = '4.0.15'
    def tablesawVersion = "0.43.1"

    implementation project(':gi-common')
    implementation 'se.alipsa:fx-yearmonth-picker:1.1.0'
    implementation 'se.alipsa.groovy:matrix-core:1.1.3-SNAPSHOT'
    implementation 'se.alipsa.groovy:matrix-charts:1.0.0-SNAPSHOT'
    implementation "tech.tablesaw:tablesaw-core:${tablesawVersion}"
    implementation "tech.tablesaw:tablesaw-jsplot:${tablesawVersion}"
    implementation "se.alipsa.tablesaw:tablesaw-charts:1.0.0-SNAPSHOT"
    compileOnly "org.apache.groovy:groovy:${groovyVersion}"
    compileOnly "org.openjfx:javafx-graphics:${javaFxVersion}:$qualifier"
    compileOnly "org.openjfx:javafx-base:${javaFxVersion}:$qualifier"
    compileOnly "org.openjfx:javafx-controls:${javaFxVersion}:$qualifier"
    compileOnly "org.openjfx:javafx-swing:${javaFxVersion}:$qualifier"
    compileOnly "org.openjfx:javafx-web:${javaFxVersion}:$qualifier"

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "org.openjfx:javafx-graphics:${javaFxVersion}:$qualifier"
    testImplementation "org.openjfx:javafx-base:${javaFxVersion}:$qualifier"
    testImplementation "org.openjfx:javafx-controls:${javaFxVersion}:$qualifier"
    testImplementation "org.openjfx:javafx-swing:${javaFxVersion}:$qualifier"
    testImplementation "org.openjfx:javafx-web:${javaFxVersion}:$qualifier"
}

test {
    useJUnitPlatform()
}

def fatJarContainer = tasks.register('fatJar', Jar) {
    dependsOn(classes)
    archiveBaseName = project.name + '-fat'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}


jar {
    dependsOn fatJarContainer
}