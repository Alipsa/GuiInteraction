plugins {
    //id 'java'
    id 'groovy'
    id 'java-library'
    id 'signing'
    id "com.github.ben-manes.versions" version "0.47.0"
}

group = 'se.alipsa'
version = '1.0.0-SNAPSHOT'
description = 'Allows Gade Gui Interactive capabilities from a standalone app'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    withSourcesJar()
    withJavadocJar()
}

dependencies {
  def tablesawVersion = "0.43.1"

  implementation project(':gi-common')
  compileOnly 'org.apache.groovy:groovy-all:4.0.15'

  implementation "tech.tablesaw:tablesaw-core:${tablesawVersion}"
  implementation "tech.tablesaw:tablesaw-jsplot:${tablesawVersion}"
  //implementation "tech.tablesaw:tablesaw-excel:${tablesawVersion}"
  //implementation "tech.tablesaw:tablesaw-json:${tablesawVersion}"
  implementation "tech.tablesaw:tablesaw-html:${tablesawVersion}"
  //implementation "tech.tablesaw:tablesaw-aggregate:${tablesawVersion}"
  implementation "se.alipsa.tablesaw:tablesaw-charts:1.0.0-SNAPSHOT"

  implementation 'se.alipsa.groovy:matrix:1.1.3-SNAPSHOT'
  implementation 'se.alipsa.groovy:matrix-charts:1.0.0-SNAPSHOT'
  implementation "se.alipsa:swing-yearmonth-picker:1.0.0-SNAPSHOT"

  implementation 'com.github.lgooddatepicker:LGoodDatePicker:11.2.1'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    if (version.contains('SNAPSHOT')) {
        // Slows down the build (a lot), use only if local SNAPSHOTS are needed
        mavenLocal()
    }
}

def fatJarContainer = tasks.register('fatJar', Jar) {
  dependsOn(classes)
  archiveBaseName = project.name + '-fat'
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from {
    configurations.runtimeClasspath.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
  exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
  with jar
}


jar {
  dependsOn fatJarContainer
}

//Maven Central uploads

signing {
    if (project.properties['signing.keyId'] != null) {
        project.logger.lifecycle("Signing artifacts...")
        sign publishing.publications.maven
    } else {
        project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    gradleReleaseChannel = "current"
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject('Release candidate')
                }
            }
        }
    }
}